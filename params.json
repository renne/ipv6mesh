{"name":"IPv6MESH","tagline":"IPv6MESH extends the IPv6 protocol into an ad-hoc meshed communication network on OSI Layer 3.","body":"IPv6MESH <a href=\"https://flattr.com/submit/auto?user_id=renne&url=http://ipv6mesh.eu&title=IPv6MESH&language=C99&tags=github&category=software\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" height=\"24em\" width=\"16%\"/></a>\r\n========\r\n\r\n**IPv6MESH** is a community project founded on 01/01/2014 by Rene Bartsch to develop and standardize a mesh network extension for the Internet Protocol 6 (OSI Layer 3). Every IPv6MESH node will generate it's cryptographically secured IPv6 addresses (CGEIDs) and connections to neighbour nodes ad-hoc which allows to deploy a large number of nodes in a IPv6MESH cloud automagically.\r\n\r\n**IPv6MESH** can be used to set up emergency communication networks, vehicle-2-vehicle communication (car-2-car, ship-2-ship, satellite-2-satellite), can close gaps in networks by e.g. integrating nodes into reflector posts, streetlights, trees, moored buoys or balloons, geostationary satellites or just serve as a community network.\r\n\r\n\r\n##**Planned features:**\r\n* **Proof-of-concept implementation based on TUN device**\r\n* **Filing of IETF Internet Draft**\r\n* **Security based on *4096-bit RSA* key-pairs**\r\n* ***C*ryptographically *G*enerated *E*ndpoint *ID*entifiers (*CGEIDs*)**\r\n  * 32-bit IPv6 IANA prefix (XXXX:XXXX::0/32)\r\n  * 96-bit SHA-2 hash of RSA public key as interface identifier\r\n  * Compatibel with 128 bit IPv6-addresses\r\n  * RSA based authentication\r\n  * **Decentralized ad-hoc generation**\r\n  * Import/export/backup (CGEID, public/private key) via PKCS12 files named \"&lt;CGEID&gt;.p12\"\r\n  * CGEID can be exchanged between users via QR code, NFC, VCards, etc.\r\n  * IPv6MESH router operators don't have to provide any public IPv6 addresses to users/hosts\r\n* **Privacy**\r\n  * Pseudonimyzed IP addresses (CGEIDs)\r\n    * static CGEIDs for incoming connections\r\n      * Preferred Lifetime:          1 second  (some OS do not accept a zero value)\r\n      * Valid Lifetime:     4294967295 seconds (infinite)\r\n    * temporary CGEIDs for outgoing connections\r\n      * Preferred Lifetime:      86700 seconds (24h + 5 minutes overlapping)\r\n      * Valid Lifetime:         172800 seconds (48h)\r\n      * Exchange at 00:00 o'clock UTC\r\n  * Onion routing depends on performance\r\n  * End-2-End payload encryption\r\n    * Exchange of random symmetric stream cipher key by asymmetric RSA key pair\r\n    * AES256 stream cipher\r\n    * Perfect Forward Secrecy\r\n* **Distributed HashTable for host/node/routing information**\r\n  * CGEID-based index (prevents Sybil attacks)\r\n  * RSA-signed records (prevents Spartacus attacks)\r\n  * UDP transport \r\n  * Bootstrapping\r\n    * CGEIDs known via Neighbour Discovery Protocol\r\n    * IPv4/IPv6 anycast address\r\n  * Record types of a IPv6MESH node\r\n    * CGEID/RSA public key tupel for authentication\r\n    * Point-2-Point IPv6MESH neighbours\r\n    * Public IPv4/IPv6 addresses\r\n    * Alternate CGEIDs (load-balancing, redundancy)\r\n    * NAT64 support\r\n    * Geographic position\r\n      * Distributed network coverage map\r\n      * Positioning of laser communication terminals\r\n    * Reverse Domain Name System records (PTR)\r\n  * Replaces and survives (global) blackout of\r\n    * BGP\r\n    * STUN servers\r\n    * LISP map-servers\r\n    * LISP map-resolvers\r\n    * CGEID zone reverse DNS servers\r\n* **Routing algorithm**\r\n  * ??? (evaluate Hyperboria)\r\n* **Compatibility with IPv6 LANs**\r\n  * CGEID creation/authorisation/payload encryption on IPv6MESH default gateway\r\n  * CGEID provisioning of conventional IPv6 devices via DHCPv6\r\n* **Compatibility with BGP-routed internet**\r\n  * IPv6 ingress routing via anycast address\r\n    * BGP: &lt;CGEID prefix&gt;::0/32 -> &lt;CGEID prefix&gt;::1/128 -> IPv6 addresses of all reliable IPv6MESH nodes\r\n  * All IPv6MESH nodes with IPv6 connectivity are egress border routers\r\n  * IPv4 anycast address\r\n    * BGP: XXX.XXX.XXX.XXX/32 -> IPv4 addresses of all reliable IPv6MESH nodes\r\n  * Any BGP operator can scan the D1HT and publish BGP routes via e.g. Quagga extension\r\n  * Optional NAT64 gateway support\r\n    * Provides connectivity to IPv4 hosts\r\n    * Public IPv4 addresses necessary on NAT64 gateway\r\n    * Can be registered as internet service provider to avoid german \"StÃ¶rerhaftung\"\r\n  * Reverse DNS of CGEID prefix\r\n    * All nodes with IPv4/IPv6 connectivity are authoritative anycast nameservers\r\n    * UDP only\r\n    * Rerverse DNS glue records\r\n      * IPv6: &lt;reversed CGEID prefix&gt;.ip6.arpa. 86400 NS &lt;IPv6 anycast IP&gt;\r\n      * IPv4: &lt;reversed CGEID prefix&gt;.ip6.arpa. 86400 NS &lt;IPv4 anycast IP&gt;\r\n* **LISP-tunneling**\r\n  * Connectivity between IPv6MESH clouds/isolated nodes\r\n  * CGEIDs are LISP EIDs\r\n  * IPv4/IPv6 addresses are LISP RLOCs\r\n  * CGEID -> RLOC mapping via DHT\r\n* **Physical connectivity**\r\n  * Wires and radio links can be DIY-installed between homes\r\n  * Wired communication\r\n    * IEEE 802.3 Clause 38 (1000Base-SX/LX) preferred\r\n    * IEEE 802.3 Clause 40 (1000Base-T) can be used with surge protection\r\n  * Radio communication\r\n    * IEEE 802.11ac preferred (802.11h necessary in most countries)\r\n    * IEEE 802.11ad as next generation (lobbyists needed to get reserved frequency range)\r\n    * Reduction of electromagnetic interferences on other IPv6MESH nodes\r\n      * Transmit Power Control\r\n      * 2-dimensional beamforming\r\n    * Unencrypted (B)SSID \"IETFRFC&lt;rfc number&gt;\" (\"ipv6mesh.eu\" until formal release of RFC)\r\n  * Laser Communication Terminals\r\n* **No support** for *Global No Such Agency Backup Service* **;-)** \r\n* ***GPLv2 license*** (Flattr button/Bitcoin address must not be manipulated)\r\n\r\n##**Contact**\r\nEmail: **webmaster** AT **ipv6mesh.eu**\r\n\r\n##**Contribute**\r\n* ***Support project IPv6MESH*** (hardware, internet connectivity, domains, administrative costs, ...) via Flattr by starring on GitHub or via Bitcoin address 1FqEeuW54veJzcuyKbEUYrqjTNsbTYVLKr\r\n* Test, register bugs or leave a feature request or proposal at https://github.com/renne/ipv6mesh/issues\r\n* Contribute to the Wiki at https://github.com/renne/ipv6mesh/wiki\r\n* Fork, write code and make a pull request \r\n  * Coding conventions: https://github.com/renne/ipv6mesh/wiki/Coding-conventions\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}